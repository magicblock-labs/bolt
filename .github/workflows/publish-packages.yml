name: Publish bolt-cli packages
on:
  pull_request:

env:
  release_version: 0.0.1

jobs:
  publish-npm-binaries:
    name: Publish NPM packages
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
#          - {
#            NAME: linux-x64-glibc,
#            OS: ubuntu-20.04,
#            TOOLCHAIN: stable,
#            TARGET: x86_64-unknown-linux-gnu,
#          }
#          - {
#            NAME: linux-x64-musl,
#            OS: ubuntu-22.04,
#            TOOLCHAIN: stable,
#            TARGET: x86_64-unknown-linux-musl,
#          }
#          - {
#            NAME: linux-arm64-glibc,
#            OS: ubuntu-20.04,
#            TOOLCHAIN: stable,
#            TARGET: aarch64-unknown-linux-gnu,
#          }
#          - {
#            NAME: win32-x64-msvc,
#            OS: windows-2022,
#            TOOLCHAIN: stable,
#            TARGET: x86_64-pc-windows-msvc,
#          }
#          - {
#            NAME: linux-arm64-musl,
#            OS: ubuntu-22.04,
#            TOOLCHAIN: stable,
#            TARGET: aarch64-unknown-linux-musl,
#          }
          - {
            NAME: win32-arm64-msvc,
            OS: windows-2022,
            TOOLCHAIN: stable,
            TARGET: aarch64-pc-windows-msvc,
          }
#          - {
#            NAME: darwin-x64,
#            OS: macos-11,
#            TOOLCHAIN: stable,
#            TARGET: x86_64-apple-darwin,
#          }
#          - {
#            NAME: darwin-arm64,
#            OS: macos-11,
#            TOOLCHAIN: stable,
#            TARGET: aarch64-apple-darwin,
#          }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set the release version
        shell: bash
        run: echo "RELEASE_VERSION=${{ env.release_version }}" >> $GITHUB_ENV

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.build.NAME }}" = *"-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              --allow-unauthenticated musl-tools

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.build.TOOLCHAIN }}
          target: ${{ matrix.build.TARGET }}
          override: true

      - name: Build (linux/macos)
        if: matrix.build.OS != 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --manifest-path=cli/Cargo.toml --release --locked --target ${{ matrix.build.TARGET }}

      - name: Build (windows)
        if: matrix.build.OS == 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path=cli/Cargo.toml --no-default-features --release --locked --target ${{ matrix.build.TARGET }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build and publish the NPM package
        shell: bash
        run: |
          # set the binary name
          bin="bolt"
          # derive the OS and architecture from the build matrix name
          # note: when split by a hyphen, first part is the OS and the second is the architecture
          node_os=$(echo "${{ matrix.build.NAME }}" | cut -d '-' -f1)
          export node_os
          node_arch=$(echo "${{ matrix.build.NAME }}" | cut -d '-' -f2)
          export node_arch
          # set the version
          export node_version="${{ env.RELEASE_VERSION }}"
          # set the package name
          # note: use 'windows' as OS name instead of 'win32'
          if [ "${{ matrix.build.OS }}" = "windows-2022" ]; then
            export node_pkg="${bin}-windows-${node_arch}"
          else
            export node_pkg="${bin}-${node_os}-${node_arch}"
          fi
          # create the package directory
          mkdir -p "${node_pkg}/bin"
          # generate package.json from the template
          envsubst < cli/npm-package/package.json.tmpl > "${node_pkg}/package.json"
          cat "${node_pkg}/package.json"
          # copy the binary into the package
          # note: windows binaries has '.exe' extension
          if [ "${{ matrix.build.OS }}" = "windows-2022" ]; then
            bin="${bin}.exe"
          fi
          cp "target/${{ matrix.build.TARGET }}/release/${bin}" "${node_pkg}/bin"
          # publish the package
          cd "${node_pkg}"
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NPM_GITHUB_TOKEN }}" > ~/.npmrc
          npm set //npm.pkg.github.com/:_authToken ${{ secrets.NPM_GITHUB_TOKEN }}
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_GITHUB_TOKEN }}